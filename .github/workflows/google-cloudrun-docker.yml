# This workflow build and push a Docker container to Google Artifact Registry and deploy it on Cloud Run when a commit is pushed to the "main" branch
#
# Overview:
#
# 1. Authenticate to Google Cloud
# 2. Authenticate Docker to Artifact Registry
# 3. Build a docker container
# 4. Publish it to Google Artifact Registry
# 5. Deploy it to Cloud Run
#
# To configure this workflow:
#
# 1. Ensure the required Google Cloud APIs are enabled:
#
#    Cloud Run            run.googleapis.com
#    Artifact Registry    artifactregistry.googleapis.com
#
# 2. Create and configure Workload Identity Federation for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Ensure the required IAM permissions are granted
#
#    Cloud Run
#      roles/run.admin
#      roles/iam.serviceAccountUser     (to act as the Cloud Run runtime service account)
#
#    Artifact Registry
#      roles/artifactregistry.admin     (project or repository level)
#
#    NOTE: You should always follow the principle of least privilege when assigning IAM roles
#
# 4. Create GitHub secrets for WIF_PROVIDER and WIF_SERVICE_ACCOUNT
#
# 5. Change the values for the GAR_LOCATION, SERVICE and REGION environment variables (below).
#
# NOTE: To use Google Container Registry instead, replace ${{ env.GAR_LOCATION }}-docker.pkg.dev with gcr.io
#
# For more support on how to run this workflow, please visit https://github.com/marketplace/actions/deploy-to-cloud-run
#
# Further reading:
#   Cloud Run IAM permissions                 - https://cloud.google.com/run/docs/deploying
#   Artifact Registry IAM permissions         - https://cloud.google.com/artifact-registry/docs/access-control#roles
#   Container Registry vs Artifact Registry   - https://cloud.google.com/blog/products/application-development/understanding-artifact-registry-vs-container-registry
#   Principle of least privilege              - https://cloud.google.com/blog/products/identity-security/dont-get-pwned-practicing-the-principle-of-least-privilege

name: Build and Deploy to Cloud Run

on:
  push:
    branches: [ "main", "gh-actions" ] 
  workflow_dispatch:  

env:
  PROJECT_ID: optical-mind-406809
  GAR_LOCATION: europe-west1
  SERVICE: cloud-chat
  REGION: europe-west1

jobs:
  deploy:
    # Add 'id-token' with the intended permissions for workload identity federation
    permissions:
      contents: 'read'
      id-token: 'write'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '{
            "type": "service_account",
            "project_id": "optical-mind-406809",
            "private_key_id": "f8d5ec39e7e1135b39cdae7ada25831db6e417b8",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDJEA1Xc/LQCvlx\ndp0+C1xXa19ALwL3tM+lKfEJ+tqAOoGc7AP9oFcY9PRrVE8pyc3S20CmZlXU8kkD\n36a41qPBodFl0kxO4jd0eqIAsp61f37e5oZtbuzDv9nVtZDNp3sex5oI2sbF3WSE\n8RNLp49PaH9UsMvUF4kfSWCXzgKqdIeUTkuI0f6F/1yxzg93iGE9sprrw1qd/aRD\nUvNOiZr7u21aopn0ZFTwfZddxcqxOvXrV7ytn+4M1YPoAGlsgU12ftQ4kZT/gVkB\nFvgus86lnpFCT+kba7k8ytWPS87pbBGPYl2dYSPZ/VA1c8/t01aJn0dzcpUrwl3f\ndqwSbqH7AgMBAAECggEAXwXcGFGvFs2o+AvD4rfBy3ruSEovj9v/KqK4zSumKmX8\nLaqJdEtb/mp+PV9aDnjWcmm2ky3YMMzU3yTLCZ4/RFryuLl74Ogep0jx2XyRb1uz\nHSs7qup6sUSxccPejKMzl+djj/29ZXPtdrrskJu/KhtL2j24ByOcZZHrObNeJSoY\nzoWM2BjGjiac5ruxaSCbxDJ0+uzFk9lnFVQ5VtWEH4V456/8D346FQsBZ4Q6lvXx\n4dxSZpyDJ2HCqoZz4wKIvT/AxLLl3TrhSdW6IPqvP1Cmc2U15PfEREUV+bYpoVZw\n2FaQUpW0ZE4LNpygR0CtWDQBnyZbXj1EUnEn2RzPCQKBgQDvLYfUC+2Dm/lTzFFH\n9StzqNpLSh8sBx+APp/SBMA5AXUrxvBWXQHErzWAN6ekKl5aLOZ//ENl9wGTb7NL\nh3XJpx9r0AAyqUiG4mhnrXWGSGcPY1Z5Vwv3EyS8hH+RBLCZqZrVM6AXvo9Yfl7N\nQyH4IV0Ph97bKkGkaHSSlXAe1wKBgQDXND8rbPGVXRU50u1PSMEDVDVxTQpHVJSa\n7tPJ8MEiZIT8aXH6mMvGif2K1V6C33535AwvDkFmDtxpLGiah/Mowv7aV2U8FYgn\nnjs2+lsRlxlsdq2Ei2NLRlwDpSRnjfaFq1lRgXeHKQnyBfNWsUOcAl6vedji0rU6\nowZpYMmlfQKBgQCwuUurekS9Afpv2IAWUykQBKuHBfWSapD0CVG9tJTziggxmITs\nyzwLQAqf+n975XJh3ttRpeuG48PeVKJ+JFD79uhYmRAMXtigEZpjQN+doNHFpPi4\nH4FPxm1WffBkDrsOTyuAbOzVno/8KyORNxFabgx89T/NYKOv/x5jUNfPcQKBgQCq\nmtXVZFmk0pVIMQpGx2OUcwanGq8iW1Av/1PRDNbfoBa5UBK22rj5XV2t2XdCg1Fs\nVFLAXynDcdaUXktS7qH7V5LYn143Is68sbk53YGi0Umrbe4jXKlL/Kxni1zv52Bf\nGbcGYX/Tm9oxjzwZJxB1Nn+/1vX045wery0fD0bstQKBgQCC3zBVhbeF6pPLDPXT\nKyXYrQ1i77syaZq8HIlc2uHmgOa/3e8IW26QTUlvwblNQPXYjKM2kT/8xdTqJotj\nDlZWg1tEEhIlEe50/jwjUQSP9bFc/HZbzxscfuOZjI/uKzis5fjggPiXEsKPpHQ5\nzCZtTum2LoHYDWFJ91OOCLO5gQ==\n-----END PRIVATE KEY-----\n",
            "client_email": "887456849346-compute@developer.gserviceaccount.com",
            "client_id": "103873871759077567264",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/887456849346-compute%40developer.gserviceaccount.com",
            "universe_domain": "googleapis.com"
            }'
          
            
            #'${{ secrets.GOOGLE_CREDENTIALS }}'
          
      # BEGIN - Docker auth and build (NOTE: If you already have a container image, these Docker steps can be omitted)

      # Authenticate Docker to Google Cloud Artifact Registry
      - name: Docker Auth
        id: docker-auth
        uses: 'docker/login-action@v1'
        with:
          username: _json_key
          password: '{
            "type": "service_account",
            "project_id": "optical-mind-406809",
            "private_key_id": "f8d5ec39e7e1135b39cdae7ada25831db6e417b8",
            "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDJEA1Xc/LQCvlx\ndp0+C1xXa19ALwL3tM+lKfEJ+tqAOoGc7AP9oFcY9PRrVE8pyc3S20CmZlXU8kkD\n36a41qPBodFl0kxO4jd0eqIAsp61f37e5oZtbuzDv9nVtZDNp3sex5oI2sbF3WSE\n8RNLp49PaH9UsMvUF4kfSWCXzgKqdIeUTkuI0f6F/1yxzg93iGE9sprrw1qd/aRD\nUvNOiZr7u21aopn0ZFTwfZddxcqxOvXrV7ytn+4M1YPoAGlsgU12ftQ4kZT/gVkB\nFvgus86lnpFCT+kba7k8ytWPS87pbBGPYl2dYSPZ/VA1c8/t01aJn0dzcpUrwl3f\ndqwSbqH7AgMBAAECggEAXwXcGFGvFs2o+AvD4rfBy3ruSEovj9v/KqK4zSumKmX8\nLaqJdEtb/mp+PV9aDnjWcmm2ky3YMMzU3yTLCZ4/RFryuLl74Ogep0jx2XyRb1uz\nHSs7qup6sUSxccPejKMzl+djj/29ZXPtdrrskJu/KhtL2j24ByOcZZHrObNeJSoY\nzoWM2BjGjiac5ruxaSCbxDJ0+uzFk9lnFVQ5VtWEH4V456/8D346FQsBZ4Q6lvXx\n4dxSZpyDJ2HCqoZz4wKIvT/AxLLl3TrhSdW6IPqvP1Cmc2U15PfEREUV+bYpoVZw\n2FaQUpW0ZE4LNpygR0CtWDQBnyZbXj1EUnEn2RzPCQKBgQDvLYfUC+2Dm/lTzFFH\n9StzqNpLSh8sBx+APp/SBMA5AXUrxvBWXQHErzWAN6ekKl5aLOZ//ENl9wGTb7NL\nh3XJpx9r0AAyqUiG4mhnrXWGSGcPY1Z5Vwv3EyS8hH+RBLCZqZrVM6AXvo9Yfl7N\nQyH4IV0Ph97bKkGkaHSSlXAe1wKBgQDXND8rbPGVXRU50u1PSMEDVDVxTQpHVJSa\n7tPJ8MEiZIT8aXH6mMvGif2K1V6C33535AwvDkFmDtxpLGiah/Mowv7aV2U8FYgn\nnjs2+lsRlxlsdq2Ei2NLRlwDpSRnjfaFq1lRgXeHKQnyBfNWsUOcAl6vedji0rU6\nowZpYMmlfQKBgQCwuUurekS9Afpv2IAWUykQBKuHBfWSapD0CVG9tJTziggxmITs\nyzwLQAqf+n975XJh3ttRpeuG48PeVKJ+JFD79uhYmRAMXtigEZpjQN+doNHFpPi4\nH4FPxm1WffBkDrsOTyuAbOzVno/8KyORNxFabgx89T/NYKOv/x5jUNfPcQKBgQCq\nmtXVZFmk0pVIMQpGx2OUcwanGq8iW1Av/1PRDNbfoBa5UBK22rj5XV2t2XdCg1Fs\nVFLAXynDcdaUXktS7qH7V5LYn143Is68sbk53YGi0Umrbe4jXKlL/Kxni1zv52Bf\nGbcGYX/Tm9oxjzwZJxB1Nn+/1vX045wery0fD0bstQKBgQCC3zBVhbeF6pPLDPXT\nKyXYrQ1i77syaZq8HIlc2uHmgOa/3e8IW26QTUlvwblNQPXYjKM2kT/8xdTqJotj\nDlZWg1tEEhIlEe50/jwjUQSP9bFc/HZbzxscfuOZjI/uKzis5fjggPiXEsKPpHQ5\nzCZtTum2LoHYDWFJ91OOCLO5gQ==\n-----END PRIVATE KEY-----\n",
            "client_email": "887456849346-compute@developer.gserviceaccount.com",
            "client_id": "103873871759077567264",
            "auth_uri": "https://accounts.google.com/o/oauth2/auth",
            "token_uri": "https://oauth2.googleapis.com/token",
            "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
            "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/887456849346-compute%40developer.gserviceaccount.com",
            "universe_domain": "googleapis.com"
            }'
            #'${{ secrets.GOOGLE_CREDENTIALS }}'
          registry: '${{ env.GAR_LOCATION }}-docker.pkg.dev'

      - name: Debug
        run: |
          echo "GAR_LOCATION: ${{ env.GAR_LOCATION }}"
          echo "PROJECT_ID: ${{ env.PROJECT_ID }}"
          echo "SERVICE: ${{ env.SERVICE }}"
          echo "github.sha: ${{ github.sha }}"    

      - name: Build and Push Container
        run: |-
          docker build -t "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}" ./chat
          docker push "${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}"

      # END - Docker auth and build

      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE }}
          region: ${{ env.REGION }}
          # NOTE: If using a pre-built image, update the image name here
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

      # If required, use the Cloud Run url output in later steps
      - name: Show Output
        run: echo ${{ steps.deploy.outputs.url }}
